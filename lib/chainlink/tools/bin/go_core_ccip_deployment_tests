#!/usr/bin/env bash
set -o pipefail
set +e

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
OUTPUT_FILE=${OUTPUT_FILE:-"../output.txt"}
EXTRA_FLAGS=""

echo "Running go_core_ccip_deployment_tests for event: $GITHUB_EVENT_NAME"

if [[ "$GITHUB_EVENT_NAME" == 'pull_request' || "$GITHUB_EVENT_NAME" == "merge_group" || "$GITHUB_EVENT_NAME" == "push" ]]; then
  go install gotest.tools/gotestsum@v1.12.3
  PATH=$PATH:$(go env GOPATH)/bin
  export PATH

  cd deployment || exit 1
  gotestsum \
    --format='standard-quiet' \
    --rerun-fails-abort-on-data-race \
    --rerun-fails='3' \
    --packages='./...' \
    --jsonfile "$OUTPUT_FILE"

  EXITCODE=${PIPESTATUS[0]}
else
  cd ./deployment || exit
  go mod download

  echo "Test execution results: ---------------------"
  echo ""

  if [[ $GITHUB_EVENT_NAME == "schedule" ]]; then
    EXTRA_FLAGS="-covermode=atomic -coverpkg=./... -coverprofile=coverage.txt"
  fi

  go test ./... $EXTRA_FLAGS | tee "$OUTPUT_FILE" | grep -Ev '\[no test files\]|\[no tests to run\]'
  EXITCODE=${PIPESTATUS[0]}

  # Assert no known sensitive strings present in test logger output
  printf "\n----------------------------------------------\n\n"
  echo "Beginning check of output logs for sensitive strings"
  "$SCRIPT_PATH"/scrub_logs "$OUTPUT_FILE"
  if [[ $? != 0 ]]; then
    exit 1
  fi
fi

cd ..
echo "Exit code: $EXITCODE"
if [[ $EXITCODE != 0 ]]; then
  echo "Encountered test failures."
else
  echo "All tests passed!"
fi

echo "go_core_ccip_deployment_tests exiting with code $EXITCODE"
exit $EXITCODE
